{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nvar CatThumbnail = function CatThumbnail(props) {\n  var picture = props.picture,\n      name = props.name,\n      description = props.description,\n      temperament = props.temperament,\n      className = props.className;\n  /**\n   * We check what orientation Image is to apply different\n   * styling optinon to insure that the image covers the thumbnail fully\n   *\n   * For now, we will assume that the image is square\n   */\n\n  var _React$useState = React.useState([1, 1]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      size = _React$useState2[0],\n      setSize = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isMouseOver = _React$useState4[0],\n      setMouseOver = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      allowAnimations = _React$useState6[0],\n      setAllowAnimations = _React$useState6[1]; // if image is horizontal, we scale it up to fill the container\n\n\n  var imageScale = (isMouseOver ? 0.08 : 0) + Math.max(size[0] / size[1] / 0.8, 1);\n  var imageUrl = \"/public-assets/\".concat(picture);\n  var isLoading = size[0] === 1;\n\n  var onLoadedImage = function onLoadedImage(e) {\n    var image = e.target;\n    var width = image.width,\n        height = image.height;\n\n    if (width === size[0] && width === size[1]) {\n      // image dimensions haven't changes\n      // no need to perform the update\n      return;\n    }\n\n    setSize([width, height]);\n  };\n\n  React.useEffect(function () {\n    // we will allow hovering animations when Image has finished loading\n    // and we know its dimensions, this is done to avoid flickering while resizing\n    if (!allowAnimations && !allowAnimations) {\n      setTimeout(function () {\n        return setAllowAnimations(true);\n      }, 500);\n    }\n  }, [isLoading]);\n  return __jsx(\"article\", {\n    className: classnames(className, {\n      hover: isMouseOver,\n      loading: isLoading,\n      'animations-allowed': allowAnimations\n    }),\n    onMouseEnter: function onMouseEnter() {\n      return setMouseOver(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setMouseOver(false);\n    }\n  }, __jsx(\"div\", {\n    className: \"head\"\n  }, __jsx(\"div\", {\n    className: \"avatar\"\n  }, __jsx(\"span\", null, name[0])), __jsx(\"div\", {\n    className: \"title-block\"\n  }, __jsx(\"span\", {\n    className: \"main\"\n  }, name), __jsx(\"div\", null, temperament))), __jsx(\"div\", {\n    className: \"picture\"\n  }, __jsx(\"img\", {\n    style: {\n      transform: \"scale(\".concat(imageScale, \")\")\n    },\n    src: imageUrl,\n    alt: \"Breed: \".concat(name),\n    onLoad: onLoadedImage\n  })), __jsx(\"div\", {\n    className: \"body\"\n  }, __jsx(\"div\", {\n    className: \"description\"\n  }, description)));\n};\n\nexport default styled(CatThumbnail).withConfig({\n  displayName: \"CatThumbnail\",\n  componentId: \"sc-1inwxc8-0\"\n})([\"position:relative;display:flex;flex-direction:column;box-shadow:0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);background:white;border-radius:4px;.avatar{width:40px;height:40px;display:flex;justify-content:center;align-items:center;border-radius:50%;background:#f44336;color:white;margin-right:16px;}.head{display:flex;align-items:flex-start;}.main{font-size:0.875rem;font-family:'Roboto','Helvetica','Arial',sans-serif;font-weight:400;line-height:1.43;letter-spacing:0.01071em;width:50%;white-space:pre-wrap;}.body{font-size:0.875rem;font-family:'Roboto','Helvetica','Arial',sans-serif;font-weight:400;line-height:1.43;letter-spacing:0.01071em;color:rgba(0,0,0,0.54);}.description{height:60px;text-overflow:ellipsis;overflow:hidden;}.picture{width:100%;position:relative;overflow:hidden;padding-top:80%;cursor:pointer;}img{position:absolute;width:100%;top:0;left:0;transform-origin:top center;transition:opacity 0.5s ease-in;}&.animations-allowed{img{transition:all 0.5s ease-out;}}&.loading img,&.loading .body{opacity:0;}h4{margin:0;}.head,.body{padding:16px;}\"]);","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/components/CatThumbnail.tsx"],"names":["React","styled","classnames","CatThumbnail","props","picture","name","description","temperament","className","useState","size","setSize","isMouseOver","setMouseOver","allowAnimations","setAllowAnimations","imageScale","Math","max","imageUrl","isLoading","onLoadedImage","e","image","target","width","height","useEffect","setTimeout","hover","loading","transform"],"mappings":"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","sourcesContent":["import React, {SyntheticEvent} from 'react'\nimport styled from 'styled-components'\nimport classnames from 'classnames'\n\ninterface ThumbnailProps {\n\tpicture: string\n\tname: string\n\ttemperament: string\n\tdescription: string\n\tclassName: string\n}\n\nconst CatThumbnail = (props: ThumbnailProps) => {\n\tconst {picture, name, description, temperament, className} = props\n\t/**\n\t * We check what orientation Image is to apply different\n\t * styling optinon to insure that the image covers the thumbnail fully\n\t *\n\t * For now, we will assume that the image is square\n\t */\n\tconst [size, setSize] = React.useState([1, 1])\n\tconst [isMouseOver, setMouseOver] = React.useState(false)\n\n\tconst [allowAnimations, setAllowAnimations] = React.useState(false)\n\n\t// if image is horizontal, we scale it up to fill the container\n\tconst imageScale = (isMouseOver ? 0.08 : 0) + Math.max(size[0] / size[1] / 0.8, 1)\n\tconst imageUrl = `/public-assets/${picture}`\n\tconst isLoading = size[0] === 1\n\n\tconst onLoadedImage = (e: SyntheticEvent<HTMLImageElement, Event>) => {\n\t\tconst image = (e.target as unknown) as HTMLImageElement\n\t\tconst {width, height} = image\n\t\tif (width === size[0] && width === size[1]) {\n\t\t\t// image dimensions haven't changes\n\t\t\t// no need to perform the update\n\t\t\treturn\n\t\t}\n\t\tsetSize([width, height])\n\t}\n\n\tReact.useEffect(() => {\n\t\t// we will allow hovering animations when Image has finished loading\n\t\t// and we know its dimensions, this is done to avoid flickering while resizing\n\t\tif (!allowAnimations && !allowAnimations) {\n\t\t\tsetTimeout(() => setAllowAnimations(true), 500)\n\t\t}\n\t}, [isLoading])\n\n\treturn (\n\t\t<article className={classnames(className, {hover: isMouseOver, loading: isLoading, 'animations-allowed': allowAnimations})} onMouseEnter={() => setMouseOver(true)} onMouseLeave={() => setMouseOver(false)}>\n\t\t\t<div className=\"head\">\n\t\t\t\t<div className=\"avatar\">\n\t\t\t\t\t<span>{name[0]}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"title-block\">\n\t\t\t\t\t<span className=\"main\">{name}</span>\n\t\t\t\t\t<div>{temperament}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"picture\">\n\t\t\t\t<img style={{transform: `scale(${imageScale})`}} src={imageUrl} alt={`Breed: ${name}`} onLoad={onLoadedImage} />\n\t\t\t</div>\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"description\">{description}</div>\n\t\t\t</div>\n\t\t</article>\n\t)\n}\n\nexport default styled(CatThumbnail)`\n\tposition: relative;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbox-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n\tbackground: white;\n\tborder-radius: 4px;\n\n\t.avatar {\n\t\twidth: 40px;\n\t\theight: 40px;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tborder-radius: 50%;\n\t\tbackground: #f44336;\n\t\tcolor: white;\n\t\tmargin-right: 16px;\n\t}\n\n\t.head {\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t}\n\n\t.main {\n\t\tfont-size: 0.875rem;\n\t\tfont-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n\t\tfont-weight: 400;\n\t\tline-height: 1.43;\n\t\tletter-spacing: 0.01071em;\n\t\twidth: 50%;\n\t\twhite-space: pre-wrap;\n\t}\n\n\t.body {\n\t\tfont-size: 0.875rem;\n\t\tfont-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n\t\tfont-weight: 400;\n\t\tline-height: 1.43;\n\t\tletter-spacing: 0.01071em;\n\t\tcolor: rgba(0, 0, 0, 0.54);\n\t}\n\n\t.description {\n\t\theight: 60px;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t}\n\n\t.picture {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t\tpadding-top: 80%;\n\t\tcursor: pointer;\n\t}\n\n\timg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\ttransform-origin: top center;\n\t\ttransition: opacity 0.5s ease-in;\n\t}\n\n\t&.animations-allowed {\n\t\timg {\n\t\t\ttransition: all 0.5s ease-out;\n\t\t}\n\t}\n\n\t&.loading img,\n\t&.loading .body {\n\t\topacity: 0;\n\t}\n\n\th4 {\n\t\tmargin: 0;\n\t}\n\n\t.head,\n\t.body {\n\t\tpadding: 16px;\n\t}\n`\n"]},"metadata":{},"sourceType":"module"}