{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nconst CatThumbnail = props => {\n  const {\n    picture,\n    name,\n    className,\n    description\n  } = props;\n  /**\n   * We check what orientation Image is to apply different\n   * styling optinon to insure that the image covers the thumbnail fully\n   *\n   * For now, we will assume that the image is square\n   */\n\n  const [size, setSize] = React.useState([1, 1]);\n  const [isMouseOver, setMouseOver] = React.useState(false);\n  const [allowAnimations, setAllowAnimations] = React.useState(false); // if image is horizontal, we scale it up to fill the container\n\n  const imageScale = (isMouseOver ? 0.08 : 0) + Math.max(size[0] / size[1] / 0.8, 1);\n  const imageUrl = `/public-assets/${picture}`;\n  const isLoading = size[0] === 1;\n\n  const onLoadedImage = e => {\n    const image = e.target;\n    const {\n      width,\n      height\n    } = image;\n\n    if (width === size[0] && width === size[1]) {\n      // image dimensions haven't changes\n      // no need to perform the update\n      return;\n    }\n\n    setSize([width, height]);\n  };\n\n  React.useEffect(() => {\n    // we will allow hovering animations when Image has finished loading\n    // and we know its dimensions, this is done to avoid flickering while resizing\n    if (!allowAnimations && !allowAnimations) {\n      setTimeout(() => setAllowAnimations(true), 500);\n    }\n  }, [isLoading]);\n  return __jsx(\"article\", {\n    className: classnames(className, {\n      hover: isMouseOver,\n      loading: isLoading,\n      'animations-allowed': allowAnimations\n    })\n  }, __jsx(\"div\", {\n    className: \"head\"\n  }, __jsx(\"div\", {\n    className: \"avatar\"\n  }, __jsx(\"span\", null, name[0]))), __jsx(\"div\", {\n    className: \"picture\"\n  }, __jsx(\"img\", {\n    onMouseEnter: () => setMouseOver(true),\n    onMouseLeave: () => setMouseOver(false),\n    style: {\n      transform: `scale(${imageScale})`\n    },\n    src: imageUrl,\n    alt: `Breed: ${name}`,\n    onLoad: onLoadedImage\n  })), __jsx(\"div\", {\n    className: \"body\"\n  }, __jsx(\"div\", {\n    className: \"description\"\n  }, description)));\n};\n\nexport default styled(CatThumbnail).withConfig({\n  displayName: \"CatThumbnail\",\n  componentId: \"sc-1inwxc8-0\"\n})([\"position:relative;display:flex;flex-direction:column;box-shadow:0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);background:white;border-radius:4px;.avatar{width:40px;height:40px;display:flex;justify-content:center;align-items:center;border-radius:50%;background:#f44336;color:white;}.body{font-size:0.875rem;font-family:'Roboto','Helvetica','Arial',sans-serif;font-weight:400;line-height:1.43;letter-spacing:0.01071em;color:rgba(0,0,0,0.54);overflow:hidden;}.description{height:100px;}.picture{width:100%;position:relative;overflow:hidden;padding-top:80%;cursor:pointer;}img{position:absolute;width:100%;top:0;left:0;transform-origin:top center;transition:opacity 0.5s ease-in;}&.animations-allowed{img{transition:all 0.5s ease-out;}}&.loading img,&.loading .body{opacity:0;}h4{margin:0;}.head,.body{padding:16px;}\"]);","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/components/CatThumbnail.tsx"],"names":["React","styled","classnames","CatThumbnail","props","picture","name","className","description","size","setSize","useState","isMouseOver","setMouseOver","allowAnimations","setAllowAnimations","imageScale","Math","max","imageUrl","isLoading","onLoadedImage","e","image","target","width","height","useEffect","setTimeout","hover","loading","transform"],"mappings":";AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AASA,MAAMC,YAAY,GAAIC,KAAD,IAA2B;AAC/C,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,SAAhB;AAA2BC,IAAAA;AAA3B,MAA0CJ,KAAhD;AACA;;;;;;;AAMA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACW,QAAN,CAAe,CAAC,CAAD,EAAI,CAAJ,CAAf,CAAxB;AACA,QAAM,CAACC,WAAD,EAAcC,YAAd,IAA8Bb,KAAK,CAACW,QAAN,CAAe,KAAf,CAApC;AAEA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCf,KAAK,CAACW,QAAN,CAAe,KAAf,CAA9C,CAX+C,CAa/C;;AACA,QAAMK,UAAU,GAAG,CAACJ,WAAW,GAAG,IAAH,GAAU,CAAtB,IAA2BK,IAAI,CAACC,GAAL,CAAST,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd,GAAoB,GAA7B,EAAkC,CAAlC,CAA9C;AACA,QAAMU,QAAQ,GAAI,kBAAiBd,OAAQ,EAA3C;AACA,QAAMe,SAAS,GAAGX,IAAI,CAAC,CAAD,CAAJ,KAAY,CAA9B;;AAEA,QAAMY,aAAa,GAAIC,CAAD,IAAgD;AACrE,UAAMC,KAAK,GAAID,CAAC,CAACE,MAAjB;AACA,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkBH,KAAxB;;AACA,QAAIE,KAAK,KAAKhB,IAAI,CAAC,CAAD,CAAd,IAAqBgB,KAAK,KAAKhB,IAAI,CAAC,CAAD,CAAvC,EAA4C;AAC3C;AACA;AACA;AACA;;AACDC,IAAAA,OAAO,CAAC,CAACe,KAAD,EAAQC,MAAR,CAAD,CAAP;AACA,GATD;;AAWA1B,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,MAAM;AACrB;AACA;AACA,QAAI,CAACb,eAAD,IAAoB,CAACA,eAAzB,EAA0C;AACzCc,MAAAA,UAAU,CAAC,MAAMb,kBAAkB,CAAC,IAAD,CAAzB,EAAiC,GAAjC,CAAV;AACA;AACD,GAND,EAMG,CAACK,SAAD,CANH;AAQA,SACC;AAAS,IAAA,SAAS,EAAElB,UAAU,CAACK,SAAD,EAAY;AAACsB,MAAAA,KAAK,EAAEjB,WAAR;AAAqBkB,MAAAA,OAAO,EAAEV,SAA9B;AAAyC,4BAAsBN;AAA/D,KAAZ;AAA9B,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC,oBAAOR,IAAI,CAAC,CAAD,CAAX,CADD,CADD,CADD,EAMC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAK,IAAA,YAAY,EAAE,MAAMO,YAAY,CAAC,IAAD,CAArC;AAA6C,IAAA,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD,CAA7E;AAAsF,IAAA,KAAK,EAAE;AAACkB,MAAAA,SAAS,EAAG,SAAQf,UAAW;AAAhC,KAA7F;AAAkI,IAAA,GAAG,EAAEG,QAAvI;AAAiJ,IAAA,GAAG,EAAG,UAASb,IAAK,EAArK;AAAwK,IAAA,MAAM,EAAEe;AAAhL,IADD,CAND,EASC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,KAA8Bb,WAA9B,CADD,CATD,CADD;AAeA,CApDD;;AAsDA,eAAeP,MAAM,CAACE,YAAD,CAArB;AAAA;AAAA;AAAA","sourcesContent":["import React, {SyntheticEvent} from 'react'\nimport styled from 'styled-components'\nimport classnames from 'classnames'\n\ninterface ThumbnailProps {\n\tpicture: string\n\tname: string\n\tclassName: string\n\tdescription: string\n}\n\nconst CatThumbnail = (props: ThumbnailProps) => {\n\tconst {picture, name, className, description} = props\n\t/**\n\t * We check what orientation Image is to apply different\n\t * styling optinon to insure that the image covers the thumbnail fully\n\t *\n\t * For now, we will assume that the image is square\n\t */\n\tconst [size, setSize] = React.useState([1, 1])\n\tconst [isMouseOver, setMouseOver] = React.useState(false)\n\n\tconst [allowAnimations, setAllowAnimations] = React.useState(false)\n\n\t// if image is horizontal, we scale it up to fill the container\n\tconst imageScale = (isMouseOver ? 0.08 : 0) + Math.max(size[0] / size[1] / 0.8, 1)\n\tconst imageUrl = `/public-assets/${picture}`\n\tconst isLoading = size[0] === 1\n\n\tconst onLoadedImage = (e: SyntheticEvent<HTMLImageElement, Event>) => {\n\t\tconst image = (e.target as unknown) as HTMLImageElement\n\t\tconst {width, height} = image\n\t\tif (width === size[0] && width === size[1]) {\n\t\t\t// image dimensions haven't changes\n\t\t\t// no need to perform the update\n\t\t\treturn\n\t\t}\n\t\tsetSize([width, height])\n\t}\n\n\tReact.useEffect(() => {\n\t\t// we will allow hovering animations when Image has finished loading\n\t\t// and we know its dimensions, this is done to avoid flickering while resizing\n\t\tif (!allowAnimations && !allowAnimations) {\n\t\t\tsetTimeout(() => setAllowAnimations(true), 500)\n\t\t}\n\t}, [isLoading])\n\n\treturn (\n\t\t<article className={classnames(className, {hover: isMouseOver, loading: isLoading, 'animations-allowed': allowAnimations})}>\n\t\t\t<div className=\"head\">\n\t\t\t\t<div className=\"avatar\">\n\t\t\t\t\t<span>{name[0]}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"picture\">\n\t\t\t\t<img onMouseEnter={() => setMouseOver(true)} onMouseLeave={() => setMouseOver(false)} style={{transform: `scale(${imageScale})`}} src={imageUrl} alt={`Breed: ${name}`} onLoad={onLoadedImage} />\n\t\t\t</div>\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"description\">{description}</div>\n\t\t\t</div>\n\t\t</article>\n\t)\n}\n\nexport default styled(CatThumbnail)`\n\tposition: relative;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbox-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n\tbackground: white;\n\tborder-radius: 4px;\n\n\t.avatar {\n\t\twidth: 40px;\n\t\theight: 40px;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tborder-radius: 50%;\n\t\tbackground: #f44336;\n\t\tcolor: white;\n\t}\n\n\t.body {\n\t\tfont-size: 0.875rem;\n\t\tfont-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n\t\tfont-weight: 400;\n\t\tline-height: 1.43;\n\t\tletter-spacing: 0.01071em;\n\t\tcolor: rgba(0, 0, 0, 0.54);\n\t\toverflow: hidden;\n\t}\n\n\t.description {\n\t\theight: 100px;\n\t}\n\n\t.picture {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t\tpadding-top: 80%;\n\t\tcursor: pointer;\n\t}\n\n\timg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\ttransform-origin: top center;\n\t\ttransition: opacity 0.5s ease-in;\n\t}\n\n\t&.animations-allowed {\n\t\timg {\n\t\t\ttransition: all 0.5s ease-out;\n\t\t}\n\t}\n\n\t&.loading img,\n\t&.loading .body {\n\t\topacity: 0;\n\t}\n\n\th4 {\n\t\tmargin: 0;\n\t}\n\n\t.head,\n\t.body {\n\t\tpadding: 16px;\n\t}\n`\n"]},"metadata":{},"sourceType":"module"}