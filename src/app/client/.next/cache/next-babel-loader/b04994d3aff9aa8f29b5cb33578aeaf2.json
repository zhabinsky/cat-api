{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport gq from '../api/gq';\nimport debounce from \"lodash.debounce\";\n\nvar InfiniteBox = function InfiniteBox(props) {\n  var title = props.title,\n      className = props.className,\n      createQuery = props.createQuery,\n      pageSize = props.pageSize,\n      ItemComponent = props.itemComponent;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      items = _React$useState2[0],\n      setItems = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setIsLoading = _React$useState4[1];\n\n  var loadMore = function loadMore() {\n    setIsLoading(true);\n    gq(createQuery(items.length, pageSize)).then(function (response) {\n      var newItems = response.items;\n      var a = [].concat(_toConsumableArray(items), _toConsumableArray(newItems));\n      console.log(a);\n      setItems(a);\n      setIsLoading(false);\n    });\n  };\n\n  React.useEffect(function () {\n    loadMore();\n  }, [1]);\n  React.useEffect(function () {\n    if (isLoading) {\n      window.onscroll = undefined; // we are not going to listen to scroll while items are loading\n    } else {\n      window.onscroll = debounce(function () {\n        if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n          loadMore();\n        }\n      }, 100);\n    }\n  }, [items.length, isLoading]); // onScroll will change when: items.length is different or isLoading has changed \n\n  return __jsx(\"section\", {\n    className: className\n  }, __jsx(\"h3\", null, title), __jsx(\"div\", {\n    className: \"items\"\n  }, items.map(function (item, index) {\n    return __jsx(ItemComponent, _extends({\n      key: index\n    }, item));\n  })));\n};\n\nexport default styled(InfiniteBox).withConfig({\n  displayName: \"InfiniteBox\",\n  componentId: \"xucww1-0\"\n})([\".items{width:100%;display:grid;grid-template-columns:1fr;grid-gap:15px;@media (min-width:300px){grid-template-columns:repeat(2,1fr);grid-gap:17px;}@media (min-width:768px){grid-template-columns:repeat(3,1fr);grid-gap:15px;}@media (min-width:1024px){grid-template-columns:repeat(4,1fr);grid-gap:20px;}@media (min-width:1624px){grid-template-columns:repeat(5,1fr);grid-gap:30px;}}\"]);","map":null,"metadata":{},"sourceType":"module"}