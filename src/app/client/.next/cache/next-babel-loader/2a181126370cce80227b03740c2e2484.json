{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport gq from '../api/gq';\nimport debounce from \"lodash.debounce\";\n\nconst InfiniteBox = props => {\n  const {\n    title,\n    className,\n    createQuery,\n    pageSize,\n    itemComponent: ItemComponent\n  } = props;\n  const [items, setItems] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadMore = () => {\n    setIsLoading(true);\n    gq(createQuery(items.length, pageSize)).then(response => {\n      const {\n        items: newItems\n      } = response;\n      const a = [...items, ...newItems];\n      console.log(a);\n      setItems(a);\n      setIsLoading(false);\n    });\n  };\n\n  React.useEffect(() => {\n    loadMore();\n  }, [1]);\n  React.useEffect(() => {\n    if (isLoading) {\n      window.onscroll = undefined; // we are not going to listen to scroll while items are loading\n    } else {\n      window.onscroll = debounce(() => {\n        if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n          loadMore();\n        }\n      }, 100);\n    }\n  }, [items.length, isLoading]); // onScroll will change when: items.length is different or isLoading has changed \n\n  return __jsx(\"section\", {\n    className: className\n  }, __jsx(\"h3\", null, title), __jsx(\"div\", {\n    className: \"items\"\n  }, items.map((item, index) => __jsx(ItemComponent, _extends({\n    key: index\n  }, item)))));\n};\n\nexport default styled(InfiniteBox).withConfig({\n  displayName: \"InfiniteBox\",\n  componentId: \"xucww1-0\"\n})([\".items{width:100%;display:grid;grid-template-columns:1fr;grid-gap:15px;@media (min-width:300px){grid-template-columns:repeat(2,1fr);grid-gap:17px;}@media (min-width:768px){grid-template-columns:repeat(3,1fr);grid-gap:15px;}@media (min-width:1024px){grid-template-columns:repeat(4,1fr);grid-gap:20px;}@media (min-width:1624px){grid-template-columns:repeat(5,1fr);grid-gap:30px;}}\"]);","map":null,"metadata":{},"sourceType":"module"}