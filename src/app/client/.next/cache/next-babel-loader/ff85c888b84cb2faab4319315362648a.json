{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport gq from '../api/gq';\nimport debounce from \"lodash.debounce\";\n\nvar InfiniteBox = function InfiniteBox(props) {\n  var title = props.title,\n      className = props.className,\n      createQuery = props.createQuery,\n      pageSize = props.pageSize,\n      ItemComponent = props.itemComponent;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      items = _React$useState2[0],\n      setItems = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setIsLoading = _React$useState4[1];\n\n  var loadMore = function loadMore() {\n    setIsLoading(true);\n    gq(createQuery(items.length, pageSize)).then(function (response) {\n      var newItems = response.items;\n      var a = [].concat(_toConsumableArray(items), _toConsumableArray(newItems));\n      console.log(a);\n      setItems(a);\n      setIsLoading(false);\n    });\n  };\n\n  React.useEffect(function () {\n    loadMore();\n  }, [1]);\n  React.useEffect(function () {\n    if (isLoading) {\n      window.onscroll = undefined; // we are not going to listen to scroll while items are loading\n    } else {\n      window.onscroll = debounce(function () {\n        if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n          loadMore();\n        }\n      }, 100);\n    }\n  }, [items.length, isLoading]); // onScroll will change when: items.length is different or isLoading has changed \n\n  return __jsx(\"section\", {\n    className: classnames(className, {\n      loading: isLoading\n    })\n  }, __jsx(\"h3\", null, title), __jsx(\"div\", {\n    className: \"items\"\n  }, items.map(function (item, index) {\n    return __jsx(ItemComponent, _extends({\n      key: index\n    }, item));\n  })), __jsx(\"div\", {\n    className: \"loader\"\n  }));\n};\n\nexport default styled(InfiniteBox).withConfig({\n  displayName: \"InfiniteBox\",\n  componentId: \"xucww1-0\"\n})([\".items{width:100%;display:grid;grid-template-columns:1fr;grid-gap:15px;@media (min-width:300px){grid-template-columns:repeat(2,1fr);grid-gap:17px;}@media (min-width:768px){grid-template-columns:repeat(3,1fr);grid-gap:15px;}@media (min-width:1024px){grid-template-columns:repeat(4,1fr);grid-gap:20px;}@media (min-width:1624px){grid-template-columns:repeat(5,1fr);grid-gap:30px;}}.loader{position:relative;padding-top:10%;margin:50px 0;background:url(/loader.png);background-position:center;background-size:contain;background-repeat:no-repeat;opacity:0.3;transition:all 0.3s ease-out;}&.loading .loader{opacity:1;}\"]);","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/components/InfiniteBox.tsx"],"names":["React","classnames","styled","gq","debounce","InfiniteBox","props","title","className","createQuery","pageSize","ItemComponent","itemComponent","useState","items","setItems","isLoading","setIsLoading","loadMore","length","then","response","newItems","a","console","log","useEffect","window","onscroll","undefined","innerHeight","document","documentElement","scrollTop","offsetHeight","loading","map","item","index"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,EAAP,MAAe,WAAf;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAoBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAkB;AAAA,MAC7BC,KAD6B,GACyCD,KADzC,CAC7BC,KAD6B;AAAA,MACvBC,SADuB,GACyCF,KADzC,CACvBE,SADuB;AAAA,MACbC,WADa,GACyCH,KADzC,CACbG,WADa;AAAA,MACDC,QADC,GACyCJ,KADzC,CACDI,QADC;AAAA,MACuBC,aADvB,GACyCL,KADzC,CACQM,aADR;;AAAA,wBAEZZ,KAAK,CAACa,QAAN,CAAe,EAAf,CAFY;AAAA;AAAA,MAE9BC,KAF8B;AAAA,MAExBC,QAFwB;;AAAA,yBAGJf,KAAK,CAACa,QAAN,CAAe,KAAf,CAHI;AAAA;AAAA,MAG9BG,SAH8B;AAAA,MAGpBC,YAHoB;;AAKrC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtBD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAd,IAAAA,EAAE,CAACM,WAAW,CAACK,KAAK,CAACK,MAAP,EAAcT,QAAd,CAAZ,CAAF,CACEU,IADF,CACO,UAACC,QAAD,EAAmC;AAAA,UACzBC,QADyB,GACZD,QADY,CAChCP,KADgC;AAExC,UAAMS,CAAC,gCAAOT,KAAP,sBAAgBQ,QAAhB,EAAP;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAR,MAAAA,QAAQ,CAACQ,CAAD,CAAR;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,KAPF;AAQA,GAVD;;AAYAjB,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,YAAM;AAAER,IAAAA,QAAQ;AAAK,GAArC,EAAsC,CAAC,CAAD,CAAtC;AACAlB,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,YAAM;AACrB,QAAGV,SAAH,EAAc;AACbW,MAAAA,MAAM,CAACC,QAAP,GAAkBC,SAAlB,CADa,CACgB;AAC7B,KAFD,MAEO;AACNF,MAAAA,MAAM,CAACC,QAAP,GAAkBxB,QAAQ,CAAC,YAAM;AAChC,YACCuB,MAAM,CAACG,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACIF,QAAQ,CAACC,eAAT,CAAyBE,YAF9B,EAGE;AACDhB,UAAAA,QAAQ;AACR;AACD,OAPyB,EAOxB,GAPwB,CAA1B;AAQA;AACD,GAbD,EAaE,CAACJ,KAAK,CAACK,MAAP,EAAcH,SAAd,CAbF,EAlBqC,CA+BR;;AAE7B,SACC;AAAS,IAAA,SAAS,EAAEf,UAAU,CAACO,SAAD,EAAW;AAAE2B,MAAAA,OAAO,EAAEnB;AAAX,KAAX;AAA9B,KACC,kBAAKT,KAAL,CADD,EAEC;AAAK,IAAA,SAAS,EAAC;AAAf,KACEO,KAAK,CAACsB,GAAN,CAAU,UAACC,IAAD,EAAMC,KAAN;AAAA,WACV,MAAC,aAAD;AAAe,MAAA,GAAG,EAAEA;AAApB,OAA+BD,IAA/B,EADU;AAAA,GAAV,CADF,CAFD,EAQC;AAAK,IAAA,SAAS,EAAC;AAAf,IARD,CADD;AAYA,CA7CD;;AA+CA,eAAenC,MAAM,CAACG,WAAD,CAArB;AAAA;AAAA;AAAA","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport gq from '../api/gq';\nimport debounce from \"lodash.debounce\";\n\ninterface CreateQueryFunction {\n\t(skip: number,limit: number): string;\n}\n\ninterface Props {\n\ttitle: string;\n\tpageSize: number;\n\tclassName: string;\n\titemComponent: Function;\n\tcreateQuery: CreateQueryFunction;\n}\n\n// Helped https://alligator.io/react/react-infinite-scroll/\n\ninterface InfiniteBoxResponse {\n\titems: Array<object>;\n}\n\nconst InfiniteBox = (props: Props) => {\n\tconst { title,className,createQuery,pageSize,itemComponent: ItemComponent } = props;\n\tconst [items,setItems] = React.useState([]);\n\tconst [isLoading,setIsLoading] = React.useState(false);\n\n\tconst loadMore = () => {\n\t\tsetIsLoading(true);\n\t\tgq(createQuery(items.length,pageSize))\n\t\t\t.then((response: InfiniteBoxResponse) => {\n\t\t\t\tconst { items: newItems } = response;\n\t\t\t\tconst a = [...items,...newItems];\n\t\t\t\tconsole.log(a);\n\t\t\t\tsetItems(a);\n\t\t\t\tsetIsLoading(false);\n\t\t\t});\n\t};\n\n\tReact.useEffect(() => { loadMore(); },[1]);\n\tReact.useEffect(() => {\n\t\tif(isLoading) {\n\t\t\twindow.onscroll = undefined; // we are not going to listen to scroll while items are loading\n\t\t} else {\n\t\t\twindow.onscroll = debounce(() => {\n\t\t\t\tif(\n\t\t\t\t\twindow.innerHeight + document.documentElement.scrollTop\n\t\t\t\t\t=== document.documentElement.offsetHeight\n\t\t\t\t) {\n\t\t\t\t\tloadMore();\n\t\t\t\t}\n\t\t\t},100);\n\t\t}\n\t},[items.length,isLoading]); // onScroll will change when: items.length is different or isLoading has changed \n\n\treturn (\n\t\t<section className={classnames(className,{ loading: isLoading })}>\n\t\t\t<h3>{title}</h3>\n\t\t\t<div className=\"items\">\n\t\t\t\t{items.map((item,index) => (\n\t\t\t\t\t<ItemComponent key={index} {...item} />\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<div className=\"loader\"></div>\n\t\t</section>\n\t);\n};\n\nexport default styled(InfiniteBox)`\n\t.items {\n\t\twidth: 100%;\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-gap: 15px;\n\t\t@media (min-width: 300px) { grid-template-columns: repeat(2, 1fr); grid-gap: 17px;}\n\t\t@media (min-width: 768px) { grid-template-columns: repeat(3, 1fr); grid-gap: 15px;}\n\t\t@media (min-width: 1024px) { grid-template-columns: repeat(4, 1fr); grid-gap: 20px;}\n\t\t@media (min-width: 1624px) { grid-template-columns: repeat(5, 1fr); grid-gap: 30px;}\n\t}\n\n\t.loader {\n\t\tposition: relative;\n\t\tpadding-top: 10%;\n\t\tmargin: 50px 0;\n\t\tbackground: url(/loader.png);\n\t\tbackground-position: center;\n\t\tbackground-size: contain;\n\t\tbackground-repeat: no-repeat;\n\t\topacity: 0.3;\n\t\ttransition: all 0.3s ease-out;\n\t}\n\n\t&.loading .loader {\n\t\topacity: 1;\n\t}\n`;"]},"metadata":{},"sourceType":"module"}