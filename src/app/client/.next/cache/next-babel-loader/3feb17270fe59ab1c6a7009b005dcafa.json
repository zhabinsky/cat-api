{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport gq from '../api/gq';\nimport debounce from 'lodash.debounce';\n\nconst InfiniteBox = props => {\n  const {\n    title,\n    className,\n    createQuery,\n    pageSize,\n    itemComponent: ItemComponent\n  } = props;\n  const [items, setItems] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadMore = () => {\n    setIsLoading(true);\n    gq(createQuery(items.length, pageSize)).then(response => {\n      const {\n        items: newItems\n      } = response;\n      setItems([...items, ...newItems]);\n      setIsLoading(false);\n    });\n  };\n\n  React.useEffect(loadMore, []);\n  React.useEffect(() => {\n    if (isLoading) {\n      window.onscroll = undefined; // we are not going to listen to scroll while items are loading\n    } else {\n      window.onscroll = debounce(() => {\n        if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n          loadMore();\n        }\n      }, 100);\n    }\n  }, [items.length, isLoading]); // onScroll will change when: items.length is different or isLoading has changed\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: classnames(className, {\n      loading: isLoading\n    })\n  }, __jsx(\"h3\", null, title), __jsx(\"div\", {\n    className: \"items\"\n  }, items.map((item, index) => __jsx(ItemComponent, _extends({\n    key: index\n  }, item)))), __jsx(\"div\", {\n    className: \"loader-container\"\n  }, __jsx(\"div\", {\n    className: \"loader\"\n  }))));\n};\n\nexport default styled(InfiniteBox).withConfig({\n  displayName: \"InfiniteBox\",\n  componentId: \"xucww1-0\"\n})([\".items{width:100%;display:grid;grid-template-columns:1fr;grid-gap:15px;@media (min-width:550px){grid-template-columns:repeat(2,1fr);grid-gap:17px;}@media (min-width:768px){grid-template-columns:repeat(3,1fr);grid-gap:18px;}@media (min-width:1024px){grid-template-columns:repeat(4,1fr);grid-gap:20px;}}.loader-container{display:flex;justify-content:center;margin:50px 0;position:relative;}.loader{position:relative;background:url(/loader.png);background-position:center;background-size:contain;background-repeat:no-repeat;transform-origin:center center;transform:scale(0.8);opacity:0;transition:all 0.3s ease-out;width:80px;height:80px;content:' ';}@keyframes rotating{from{transform:rotate(0deg);}50%{transform:rotate(180deg) scale(0.7);}to{transform:rotate(360deg);}}&.loading .loader{opacity:1;transform:scale(1);animation:rotating 1s ease-out infinite;}\"]);","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/components/InfiniteBox.tsx"],"names":["React","classnames","styled","gq","debounce","InfiniteBox","props","title","className","createQuery","pageSize","itemComponent","ItemComponent","items","setItems","useState","isLoading","setIsLoading","loadMore","length","then","response","newItems","useEffect","window","onscroll","undefined","innerHeight","document","documentElement","scrollTop","offsetHeight","loading","map","item","index"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,EAAP,MAAe,WAAf;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAoBA,MAAMC,WAAW,GAAIC,KAAD,IAAkB;AACrC,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA,QAAhC;AAA0CC,IAAAA,aAAa,EAAEC;AAAzD,MAA0EN,KAAhF;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBd,KAAK,CAACe,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,KAAK,CAACe,QAAN,CAAe,KAAf,CAAlC;;AAEA,QAAMG,QAAQ,GAAG,MAAM;AACtBD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAd,IAAAA,EAAE,CAACM,WAAW,CAACI,KAAK,CAACM,MAAP,EAAeT,QAAf,CAAZ,CAAF,CAAwCU,IAAxC,CAA8CC,QAAD,IAAmC;AAC/E,YAAM;AAACR,QAAAA,KAAK,EAAES;AAAR,UAAoBD,QAA1B;AACAP,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGS,QAAd,CAAD,CAAR;AACAL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,KAJD;AAKA,GAPD;;AASAjB,EAAAA,KAAK,CAACuB,SAAN,CAAgBL,QAAhB,EAA0B,EAA1B;AACAlB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,MAAM;AACrB,QAAIP,SAAJ,EAAe;AACdQ,MAAAA,MAAM,CAACC,QAAP,GAAkBC,SAAlB,CADc,CACc;AAC5B,KAFD,MAEO;AACNF,MAAAA,MAAM,CAACC,QAAP,GAAkBrB,QAAQ,CAAC,MAAM;AAChC,YAAIoB,MAAM,CAACG,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KAA4DF,QAAQ,CAACC,eAAT,CAAyBE,YAAzF,EAAuG;AACtGb,UAAAA,QAAQ;AACR;AACD,OAJyB,EAIvB,GAJuB,CAA1B;AAKA;AACD,GAVD,EAUG,CAACL,KAAK,CAACM,MAAP,EAAeH,SAAf,CAVH,EAfqC,CAyBP;;AAE9B,SACC,MAAC,KAAD,CAAO,QAAP,QACC;AAAS,IAAA,SAAS,EAAEf,UAAU,CAACO,SAAD,EAAY;AAACwB,MAAAA,OAAO,EAAEhB;AAAV,KAAZ;AAA9B,KACC,kBAAKT,KAAL,CADD,EAEC;AAAK,IAAA,SAAS,EAAC;AAAf,KACEM,KAAK,CAACoB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KACV,MAAC,aAAD;AAAe,IAAA,GAAG,EAAEA;AAApB,KAA+BD,IAA/B,EADA,CADF,CAFD,EAOC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,IADD,CAPD,CADD,CADD;AAeA,CA1CD;;AA4CA,eAAehC,MAAM,CAACG,WAAD,CAArB;AAAA;AAAA;AAAA","sourcesContent":["import React from 'react'\nimport classnames from 'classnames'\nimport styled from 'styled-components'\nimport gq from '../api/gq'\nimport debounce from 'lodash.debounce'\n\ninterface CreateQueryFunction {\n\t(skip: number, limit: number): string\n}\n\ninterface Props {\n\ttitle: string\n\tpageSize: number\n\tclassName: string\n\titemComponent: Function\n\tcreateQuery: CreateQueryFunction\n}\n\n// Inspiration: https://alligator.io/react/react-infinite-scroll/\n\ninterface InfiniteBoxResponse {\n\titems: Array<object>\n}\n\nconst InfiniteBox = (props: Props) => {\n\tconst {title, className, createQuery, pageSize, itemComponent: ItemComponent} = props\n\tconst [items, setItems] = React.useState([])\n\tconst [isLoading, setIsLoading] = React.useState(false)\n\n\tconst loadMore = () => {\n\t\tsetIsLoading(true)\n\t\tgq(createQuery(items.length, pageSize)).then((response: InfiniteBoxResponse) => {\n\t\t\tconst {items: newItems} = response\n\t\t\tsetItems([...items, ...newItems])\n\t\t\tsetIsLoading(false)\n\t\t})\n\t}\n\n\tReact.useEffect(loadMore, [])\n\tReact.useEffect(() => {\n\t\tif (isLoading) {\n\t\t\twindow.onscroll = undefined // we are not going to listen to scroll while items are loading\n\t\t} else {\n\t\t\twindow.onscroll = debounce(() => {\n\t\t\t\tif (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n\t\t\t\t\tloadMore()\n\t\t\t\t}\n\t\t\t}, 100)\n\t\t}\n\t}, [items.length, isLoading]) // onScroll will change when: items.length is different or isLoading has changed\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<section className={classnames(className, {loading: isLoading})}>\n\t\t\t\t<h3>{title}</h3>\n\t\t\t\t<div className=\"items\">\n\t\t\t\t\t{items.map((item, index) => (\n\t\t\t\t\t\t<ItemComponent key={index} {...item} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"loader-container\">\n\t\t\t\t\t<div className=\"loader\" />\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default styled(InfiniteBox)`\n\t.items {\n\t\twidth: 100%;\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-gap: 15px;\n\t\t@media (min-width: 550px) {\n\t\t\tgrid-template-columns: repeat(2, 1fr);\n\t\t\tgrid-gap: 17px;\n\t\t}\n\t\t@media (min-width: 768px) {\n\t\t\tgrid-template-columns: repeat(3, 1fr);\n\t\t\tgrid-gap: 18px;\n\t\t}\n\t\t@media (min-width: 1024px) {\n\t\t\tgrid-template-columns: repeat(4, 1fr);\n\t\t\tgrid-gap: 20px;\n\t\t}\n\t}\n\n\t/* // TODO: move to separate component */\n\n\t.loader-container {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\tmargin: 50px 0;\n\t\tposition: relative;\n\t}\n\n\t.loader {\n\t\tposition: relative;\n\t\tbackground: url(/loader.png);\n\t\tbackground-position: center;\n\t\tbackground-size: contain;\n\t\tbackground-repeat: no-repeat;\n\t\ttransform-origin: center center;\n\t\ttransform: scale(0.8);\n\t\topacity: 0;\n\t\ttransition: all 0.3s ease-out;\n\t\twidth: 80px;\n\t\theight: 80px;\n\t\tcontent: ' ';\n\t}\n\n\t@keyframes rotating {\n\t\tfrom {\n\t\t\ttransform: rotate(0deg);\n\t\t}\n\t\t50% {\n\t\t\ttransform: rotate(180deg) scale(0.7);\n\t\t}\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t&.loading .loader {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t\tanimation: rotating 1s ease-out infinite;\n\t}\n`\n"]},"metadata":{},"sourceType":"module"}