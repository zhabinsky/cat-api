{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nconst CatThumbnail = props => {\n  const {\n    picture,\n    name,\n    className\n  } = props;\n  /**\n   * We check what orientation Image is to apply different\n   * styling optinon to insure that the image covers the thumbnail fully\n   * \n   * For now, we will assume that the image is square\n   */\n\n  const [size, setSize] = React.useState([1, 1]);\n  const [isMouseOver, setMouseOver] = React.useState(false); // if image is horizontal, we scale it up to fill the container\n\n  const imageScale = (isMouseOver ? 0.03 : 0) + Math.max(size[0] / size[1] / 0.7, 1);\n  const imageUrl = `/public-assets/${picture}`;\n  const isLoading = size[0] === 1;\n\n  const onLoadedImage = e => {\n    const image = e.target;\n    const {\n      width,\n      height\n    } = image;\n\n    if (width === size[0] && width === size[1]) {\n      // image dimensions haven't changes\n      // no need to perform the update\n      return;\n    }\n\n    setSize([width, height]);\n  };\n\n  return __jsx(\"article\", {\n    className: classnames(className, {\n      hover: isMouseOver,\n      loading: isLoading\n    })\n  }, __jsx(\"div\", {\n    className: \"head\"\n  }, __jsx(\"img\", {\n    onMouseEnter: () => setMouseOver(true),\n    onMouseLeave: () => setMouseOver(false),\n    style: {\n      transform: `scale(${imageScale})`\n    },\n    src: imageUrl,\n    alt: `Breed: ${name}`,\n    onLoad: onLoadedImage\n  })), __jsx(\"div\", {\n    className: \"body\"\n  }, __jsx(\"h4\", null, name)));\n};\n\nexport default styled(CatThumbnail).withConfig({\n  displayName: \"CatThumbnail\",\n  componentId: \"sc-1inwxc8-0\"\n})([\"position:relative;display:flex;flex-direction:column;.head{width:100%;position:relative;overflow:hidden;padding-top:70%;border-radius:10px;cursor:pointer;}img{position:absolute;width:100%;top:50%;left:0;transform:translateY(-50%);}img.loaded{transition:transform 0.1s ease-in;}img,.body{transition:opacity 1s ease-in;}&.loading img,&.loading .body{opacity:0;}h4{margin:10px 0 0 0;}\"]);","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/components/CatThumbnail.tsx"],"names":["React","styled","classnames","CatThumbnail","props","picture","name","className","size","setSize","useState","isMouseOver","setMouseOver","imageScale","Math","max","imageUrl","isLoading","onLoadedImage","e","image","target","width","height","hover","loading","transform"],"mappings":";AAAA,OAAOA,KAAP,MAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAQA,MAAMC,YAAY,GAAIC,KAAD,IAA2B;AAC/C,QAAM;AACLC,IAAAA,OADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA;AAHK,MAIFH,KAJJ;AAKA;;;;;;;AAMA,QAAM,CAACI,IAAD,EAAMC,OAAN,IAAiBT,KAAK,CAACU,QAAN,CAAe,CAAC,CAAD,EAAG,CAAH,CAAf,CAAvB;AACA,QAAM,CAACC,WAAD,EAAaC,YAAb,IAA6BZ,KAAK,CAACU,QAAN,CAAe,KAAf,CAAnC,CAb+C,CAe/C;;AACA,QAAMG,UAAU,GAAG,CAACF,WAAW,GAAG,IAAH,GAAU,CAAtB,IAA2BG,IAAI,CAACC,GAAL,CAAUP,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAf,GAAsB,GAA/B,EAAmC,CAAnC,CAA9C;AACA,QAAMQ,QAAQ,GAAI,kBAAiBX,OAAQ,EAA3C;AACA,QAAMY,SAAS,GAAGT,IAAI,CAAC,CAAD,CAAJ,KAAY,CAA9B;;AAEA,QAAMU,aAAa,GAAIC,CAAD,IAA+C;AACpE,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAhB;AACA,UAAM;AAAEC,MAAAA,KAAF;AAAQC,MAAAA;AAAR,QAAmBH,KAAzB;;AACA,QAAGE,KAAK,KAAKd,IAAI,CAAC,CAAD,CAAd,IAAqBc,KAAK,KAAKd,IAAI,CAAC,CAAD,CAAtC,EAA2C;AAC1C;AACA;AACA;AACA;;AACDC,IAAAA,OAAO,CAAC,CAACa,KAAD,EAAOC,MAAP,CAAD,CAAP;AACA,GATD;;AAWA,SACC;AAAS,IAAA,SAAS,EAAErB,UAAU,CAACK,SAAD,EAAW;AAAEiB,MAAAA,KAAK,EAAEb,WAAT;AAAqBc,MAAAA,OAAO,EAAER;AAA9B,KAAX;AAA9B,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AACC,IAAA,YAAY,EAAE,MAAML,YAAY,CAAC,IAAD,CADjC;AAEC,IAAA,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD,CAFjC;AAGC,IAAA,KAAK,EAAE;AAAEc,MAAAA,SAAS,EAAG,SAAQb,UAAW;AAAjC,KAHR;AAIC,IAAA,GAAG,EAAEG,QAJN;AAKC,IAAA,GAAG,EAAG,UAASV,IAAK,EALrB;AAMC,IAAA,MAAM,EAAEY;AANT,IADD,CADD,EAWC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC,kBAAKZ,IAAL,CADD,CAXD,CADD;AAiBA,CAhDD;;AAkDA,eAAeL,MAAM,CAACE,YAAD,CAArB;AAAA;AAAA;AAAA","sourcesContent":["import React,{ SyntheticEvent } from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\ninterface ThumbnailProps {\n\tpicture: string;\n\tname: string;\n\tclassName: string;\n}\n\nconst CatThumbnail = (props: ThumbnailProps) => {\n\tconst {\n\t\tpicture,\n\t\tname,\n\t\tclassName\n\t} = props;\n\t/**\n\t * We check what orientation Image is to apply different\n\t * styling optinon to insure that the image covers the thumbnail fully\n\t * \n\t * For now, we will assume that the image is square\n\t */\n\tconst [size,setSize] = React.useState([1,1]);\n\tconst [isMouseOver,setMouseOver] = React.useState(false);\n\n\t// if image is horizontal, we scale it up to fill the container\n\tconst imageScale = (isMouseOver ? 0.03 : 0) + Math.max((size[0] / size[1]) / 0.7,1);\n\tconst imageUrl = `/public-assets/${picture}`;\n\tconst isLoading = size[0] === 1;\n\n\tconst onLoadedImage = (e: SyntheticEvent<HTMLImageElement,Event>) => {\n\t\tconst image = e.target as unknown as HTMLImageElement;\n\t\tconst { width,height } = image;\n\t\tif(width === size[0] && width === size[1]) {\n\t\t\t// image dimensions haven't changes\n\t\t\t// no need to perform the update\n\t\t\treturn;\n\t\t}\n\t\tsetSize([width,height]);\n\t};\n\n\treturn (\n\t\t<article className={classnames(className,{ hover: isMouseOver,loading: isLoading })}>\n\t\t\t<div className=\"head\">\n\t\t\t\t<img\n\t\t\t\t\tonMouseEnter={() => setMouseOver(true)}\n\t\t\t\t\tonMouseLeave={() => setMouseOver(false)}\n\t\t\t\t\tstyle={{ transform: `scale(${imageScale})` }}\n\t\t\t\t\tsrc={imageUrl}\n\t\t\t\t\talt={`Breed: ${name}`}\n\t\t\t\t\tonLoad={onLoadedImage}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"body\">\n\t\t\t\t<h4>{name}</h4>\n\t\t\t</div>\n\t\t</article>\n\t);\n};\n\nexport default styled(CatThumbnail)`\n\tposition: relative;\n\n\tdisplay: flex;\n\tflex-direction: column;\n\n\t.head {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t\tpadding-top: 70%;\n\t\tborder-radius: 10px;\n\t\tcursor: pointer;\n\t}\n\n\timg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\ttop: 50%;\n\t\tleft: 0;\n\t\ttransform: translateY(-50%);\n\t}\n\n\timg.loaded {\n\t\ttransition: transform 0.1s ease-in;\n\t}\n\n\timg,\n\t.body {\n\t\ttransition: opacity 1s ease-in;\n\t}\n\n\t&.loading img,\n\t&.loading .body {\n\t\topacity: 0;\n\t}\n\n\th4 {\n\t\tmargin: 10px 0 0 0;\n\t}\n`;"]},"metadata":{},"sourceType":"module"}