{"ast":null,"code":"import nodeFetch from 'node-fetch';\nconst isServer = true;\nconst GQ_ENDPOINT = isServer ? `http://localhost:${8081}/graphql` : '/graphql';\nexport default (async request => {\n  const fetcher = isServer ? nodeFetch : fetch;\n  const promise = fetcher(GQ_ENDPOINT, {\n    method: 'POST',\n    body: request,\n    headers: {\n      \"Content-Type\": \"application/graphql\"\n    }\n  });\n  const result = await promise.then(e => {\n    return e.json();\n  });\n\n  if (!result || result.errors) {\n    console.log('Error while fetching GQ', {\n      result\n    });\n    return {};\n  }\n\n  return result.data;\n});","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/api/gq.ts"],"names":["nodeFetch","isServer","GQ_ENDPOINT","request","fetcher","fetch","promise","method","body","headers","result","then","e","json","errors","console","log","data"],"mappings":"AAAA,OAAOA,SAAP,MAAwC,YAAxC;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,WAAW,GAAGD,QAAQ,GAAI,oBAAmB,IAAK,UAA5B,GAAwC,UAApE;AAOA,gBAAe,MAAUE,OAAV,IAA8B;AAE5C,QAAMC,OAAO,GAAIH,QAAQ,GAAGD,SAAH,GAAeK,KAAxC;AAEA,QAAMC,OAAO,GAAGF,OAAO,CAACF,WAAD,EAAa;AAEnCK,IAAAA,MAAM,EAAE,MAF2B;AAGnCC,IAAAA,IAAI,EAAEL,OAH6B;AAInCM,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAJ0B,GAAb,CAAvB;AAQA,QAAMC,MAAM,GAAG,MAAMJ,OAAO,CAACK,IAAR,CAAcC,CAAD,IAAa;AAC9C,WAAOA,CAAC,CAACC,IAAF,EAAP;AACA,GAFoB,CAArB;;AAKA,MAAG,CAACH,MAAD,IAAWA,MAAM,CAACI,MAArB,EAA6B;AAE5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAsC;AAAEN,MAAAA;AAAF,KAAtC;AAEA,WAAO,EAAP;AACA;;AAED,SAAOA,MAAM,CAACO,IAAd;AACA,CAzBD","sourcesContent":["import nodeFetch,{ Response,Body } from 'node-fetch';\n\nconst isServer = typeof window === 'undefined';\nconst GQ_ENDPOINT = isServer ? `http://localhost:${8081}/graphql` : '/graphql';\n\ninterface GQResponse {\n\terrors: Array<object> | undefined;\n\tdata: object;\n}\n\nexport default async <T>(request: string) => {\n\n\tconst fetcher = (isServer ? nodeFetch : fetch);\n\n\tconst promise = fetcher(GQ_ENDPOINT,{\n\n\t\tmethod: 'POST',\n\t\tbody: request,\n\t\theaders: { \"Content-Type\": \"application/graphql\" }\n\n\t}) as unknown as Promise<Body>;\n\n\tconst result = await promise.then((e: Body) => {\n\t\treturn e.json() as Promise<Object>;\n\t}) as GQResponse;\n\n\n\tif(!result || result.errors) {\n\n\t\tconsole.log('Error while fetching GQ',{ result });\n\n\t\treturn {};\n\t}\n\n\treturn result.data;\n};"]},"metadata":{},"sourceType":"module"}