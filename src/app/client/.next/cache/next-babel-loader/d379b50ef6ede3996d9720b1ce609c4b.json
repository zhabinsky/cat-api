{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport nodeFetch from 'node-fetch';\nvar isServer = false;\nvar GRAPH_QL_ENPOINT = isServer ? \"http://localhost:\".concat(8081, \"/graphql\") : '/graphql';\nexport default (function _callee(request) {\n  var fetcher, promise, result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fetcher = isServer ? nodeFetch : fetch;\n          promise = fetcher(GRAPH_QL_ENPOINT, {\n            method: 'POST',\n            body: request,\n            headers: {\n              'Content-Type': 'application/graphql'\n            }\n          });\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(promise.then(function (e) {\n            return e.json();\n          }));\n\n        case 4:\n          result = _context.sent;\n\n          if (!(!result || result.errors)) {\n            _context.next = 8;\n            break;\n          }\n\n          console.log('Error while fetching GQ', {\n            result: result\n          });\n          return _context.abrupt(\"return\", {});\n\n        case 8:\n          return _context.abrupt(\"return\", result.data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/api/gq.ts"],"names":["nodeFetch","isServer","GRAPH_QL_ENPOINT","request","fetcher","fetch","promise","method","body","headers","then","e","json","result","errors","console","log","data"],"mappings":";AAAA,OAAOA,SAAP,MAAwC,YAAxC;AAEA,IAAMC,QAAQ,QAAd;AAEA,IAAMC,gBAAgB,GAAGD,QAAQ,8BAAuB,IAAvB,gBAAwC,UAAzE;AAOA,gBAAe,iBAAUE,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,UAAAA,OADQ,GACEH,QAAQ,GAAGD,SAAH,GAAeK,KADzB;AAGRC,UAAAA,OAHQ,GAGGF,OAAO,CAACF,gBAAD,EAAmB;AAC1CK,YAAAA,MAAM,EAAE,MADkC;AAE1CC,YAAAA,IAAI,EAAEL,OAFoC;AAG1CM,YAAAA,OAAO,EAAE;AAAC,8BAAgB;AAAjB;AAHiC,WAAnB,CAHV;AAAA;AAAA,2CASQH,OAAO,CAACI,IAAR,CAAa,UAACC,CAAD,EAAa;AAC/C,mBAAOA,CAAC,CAACC,IAAF,EAAP;AACA,WAFqB,CATR;;AAAA;AASRC,UAAAA,MATQ;;AAAA,gBAaV,CAACA,MAAD,IAAWA,MAAM,CAACC,MAbR;AAAA;AAAA;AAAA;;AAcbC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC;AAACH,YAAAA,MAAM,EAANA;AAAD,WAAvC;AAda,2CAgBN,EAhBM;;AAAA;AAAA,2CAmBPA,MAAM,CAACI,IAnBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import nodeFetch, {Response, Body} from 'node-fetch'\n\nconst isServer = typeof window === 'undefined'\n\nconst GRAPH_QL_ENPOINT = isServer ? `http://localhost:${8081}/graphql` : '/graphql'\n\ninterface GQResponse {\n\terrors: Array<object> | undefined\n\tdata: object\n}\n\nexport default async <T>(request: string) => {\n\tconst fetcher = isServer ? nodeFetch : fetch\n\n\tconst promise = (fetcher(GRAPH_QL_ENPOINT, {\n\t\tmethod: 'POST',\n\t\tbody: request,\n\t\theaders: {'Content-Type': 'application/graphql'}\n\t}) as unknown) as Promise<Body>\n\n\tconst result = (await promise.then((e: Body) => {\n\t\treturn e.json() as Promise<Object>\n\t})) as GQResponse\n\n\tif (!result || result.errors) {\n\t\tconsole.log('Error while fetching GQ', {result})\n\n\t\treturn {}\n\t}\n\n\treturn result.data\n}\n"]},"metadata":{},"sourceType":"module"}