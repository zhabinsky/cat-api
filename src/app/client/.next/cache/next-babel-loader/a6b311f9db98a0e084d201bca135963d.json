{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nconst Card = props => {\n  const {\n    picture,\n    title,\n    altText,\n    className\n  } = props;\n  /**\n   * We check what orientation Image is to apply different\n   * styling optinon to insure that the image covers the thumbnail fully\n   *\n   * For now, we will assume that the image is square\n   */\n\n  const [size, setSize] = React.useState([1, 1]);\n  const [isMouseOver, setMouseOver] = React.useState(false);\n  const [allowAnimations, setAllowAnimations] = React.useState(false); // if image is horizontal, we scale it up to fill the container\n\n  const imageScale = (isMouseOver ? 0.08 : 0) + Math.max(size[0] / size[1] / 0.8, 1);\n  const imageUrl = `/public-assets/${picture}`;\n  const isLoading = size[0] === 1;\n\n  const onLoadedImage = e => {\n    const image = e.target;\n    const {\n      width,\n      height\n    } = image;\n\n    if (width === size[0] && width === size[1]) {\n      // image dimensions haven't changes\n      // no need to perform the update\n      return;\n    }\n\n    setSize([width, height]);\n  };\n\n  React.useEffect(() => {\n    // we will allow hovering animations when Image has finished loading\n    // and we know its dimensions, this is done to avoid flickering while resizing\n    if (!allowAnimations && !allowAnimations) {\n      setTimeout(() => setAllowAnimations(true), 500);\n    }\n  }, [isLoading]);\n  const cardClassNames = classnames(\"card \", className, {\n    hover: isMouseOver,\n    loading: isLoading,\n    'interact': allowAnimations\n  });\n  return __jsx(\"article\", {\n    className: cardClassNames,\n    onMouseEnter: () => setMouseOver(true),\n    onMouseLeave: () => setMouseOver(false)\n  }, __jsx(\"div\", {\n    className: \"head\"\n  }, __jsx(\"div\", {\n    className: \"avatar\"\n  }, title[0]), __jsx(\"div\", {\n    className: \"title\"\n  }, title)), __jsx(\"div\", {\n    className: \"picture\"\n  }, __jsx(\"img\", {\n    style: {\n      transform: `scale(${imageScale})`\n    },\n    src: imageUrl,\n    alt: altText,\n    onLoad: onLoadedImage\n  })), __jsx(\"div\", {\n    className: \"body\"\n  }, props.body));\n};\n\nexport default styled(Card).withConfig({\n  displayName: \"Card\",\n  componentId: \"sc-1vcisw7-0\"\n})([\"position:relative;display:flex;flex-direction:column;box-shadow:0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);background:white;border-radius:4px;.avatar{display:flex;justify-content:center;align-items:center;width:40px;height:40px;overflow:hidden;position:relative;font-size:1.25rem;flex-shrink:0;font-family:'Roboto','Helvetica','Arial',sans-serif;line-height:1;user-select:none;border-radius:50%;margin-right:13px;background:coral;color:white;}.head{display:flex;align-items:center;padding:16px;}.body{font-size:0.875rem;font-family:'Roboto','Helvetica','Arial',sans-serif;font-weight:400;line-height:1.43;letter-spacing:0.01071em;color:rgba(0,0,0,0.54);padding:16px;}.picture{width:100%;position:relative;overflow:hidden;padding-top:80%;cursor:pointer;}img{position:absolute;width:100%;top:0;left:0;transform-origin:top center;transition:opacity 0.5s ease-in;}&.interact img{transition:all 0.5s ease-out;}&.loading img,&.loading .body{opacity:0;}\"]);","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/ui/Card.tsx"],"names":["React","styled","classnames","Card","props","picture","title","altText","className","size","setSize","useState","isMouseOver","setMouseOver","allowAnimations","setAllowAnimations","imageScale","Math","max","imageUrl","isLoading","onLoadedImage","e","image","target","width","height","useEffect","setTimeout","cardClassNames","hover","loading","transform","body"],"mappings":";AAAA,OAAOA,KAAP,MAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAYA,MAAMC,IAA8B,GAAIC,KAAD,IAAkB;AAExD,QAAM;AAAEC,IAAAA,OAAF;AAAUC,IAAAA,KAAV;AAAgBC,IAAAA,OAAhB;AAAwBC,IAAAA;AAAxB,MAAsCJ,KAA5C;AACA;;;;;;;AAMA,QAAM,CAACK,IAAD,EAAMC,OAAN,IAAiBV,KAAK,CAACW,QAAN,CAAe,CAAC,CAAD,EAAG,CAAH,CAAf,CAAvB;AACA,QAAM,CAACC,WAAD,EAAaC,YAAb,IAA6Bb,KAAK,CAACW,QAAN,CAAe,KAAf,CAAnC;AAEA,QAAM,CAACG,eAAD,EAAiBC,kBAAjB,IAAuCf,KAAK,CAACW,QAAN,CAAe,KAAf,CAA7C,CAZwD,CAcxD;;AACA,QAAMK,UAAU,GAAG,CAACJ,WAAW,GAAG,IAAH,GAAU,CAAtB,IAA2BK,IAAI,CAACC,GAAL,CAAST,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd,GAAoB,GAA7B,EAAiC,CAAjC,CAA9C;AACA,QAAMU,QAAQ,GAAI,kBAAiBd,OAAQ,EAA3C;AACA,QAAMe,SAAS,GAAGX,IAAI,CAAC,CAAD,CAAJ,KAAY,CAA9B;;AAEA,QAAMY,aAAa,GAAIC,CAAD,IAA+C;AACpE,UAAMC,KAAK,GAAID,CAAC,CAACE,MAAjB;AACA,UAAM;AAAEC,MAAAA,KAAF;AAAQC,MAAAA;AAAR,QAAmBH,KAAzB;;AACA,QAAGE,KAAK,KAAKhB,IAAI,CAAC,CAAD,CAAd,IAAqBgB,KAAK,KAAKhB,IAAI,CAAC,CAAD,CAAtC,EAA2C;AAC1C;AACA;AACA;AACA;;AACDC,IAAAA,OAAO,CAAC,CAACe,KAAD,EAAOC,MAAP,CAAD,CAAP;AACA,GATD;;AAWA1B,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,MAAM;AACrB;AACA;AACA,QAAG,CAACb,eAAD,IAAoB,CAACA,eAAxB,EAAyC;AACxCc,MAAAA,UAAU,CAAC,MAAMb,kBAAkB,CAAC,IAAD,CAAzB,EAAgC,GAAhC,CAAV;AACA;AACD,GAND,EAME,CAACK,SAAD,CANF;AAQA,QAAMS,cAAc,GAAG3B,UAAU,CAAC,OAAD,EAASM,SAAT,EAAmB;AACnDsB,IAAAA,KAAK,EAAElB,WAD4C;AAEnDmB,IAAAA,OAAO,EAAEX,SAF0C;AAGnD,gBAAYN;AAHuC,GAAnB,CAAjC;AAMA,SACC;AACC,IAAA,SAAS,EAAEe,cADZ;AAEC,IAAA,YAAY,EAAE,MAAMhB,YAAY,CAAC,IAAD,CAFjC;AAGC,IAAA,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD;AAHjC,KAKC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,KAAyBP,KAAK,CAAC,CAAD,CAA9B,CADD,EAEC;AAAK,IAAA,SAAS,EAAC;AAAf,KAAwBA,KAAxB,CAFD,CALD,EAUC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AACC,IAAA,KAAK,EAAE;AAAE0B,MAAAA,SAAS,EAAG,SAAQhB,UAAW;AAAjC,KADR;AAEC,IAAA,GAAG,EAAEG,QAFN;AAGC,IAAA,GAAG,EAAEZ,OAHN;AAIC,IAAA,MAAM,EAAEc;AAJT,IADD,CAVD,EAmBC;AAAK,IAAA,SAAS,EAAC;AAAf,KAAuBjB,KAAK,CAAC6B,IAA7B,CAnBD,CADD;AAuBA,CAnED;;AAqEA,eAAehC,MAAM,CAACE,IAAD,CAArB;AAAA;AAAA;AAAA","sourcesContent":["import React,{ FunctionComponent,SyntheticEvent } from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { Button } from '../ui';\n\ninterface Props {\n\tclassName?: string;\n\tchildren?: any;\n\tbody?: any;\n\tpicture: string;\n\ttitle: string;\n\taltText: string;\n}\n\nconst Card: FunctionComponent<Props> = (props: Props) => {\n\n\tconst { picture,title,altText,className } = props;\n\t/**\n\t * We check what orientation Image is to apply different\n\t * styling optinon to insure that the image covers the thumbnail fully\n\t *\n\t * For now, we will assume that the image is square\n\t */\n\tconst [size,setSize] = React.useState([1,1]);\n\tconst [isMouseOver,setMouseOver] = React.useState(false);\n\n\tconst [allowAnimations,setAllowAnimations] = React.useState(false);\n\n\t// if image is horizontal, we scale it up to fill the container\n\tconst imageScale = (isMouseOver ? 0.08 : 0) + Math.max(size[0] / size[1] / 0.8,1);\n\tconst imageUrl = `/public-assets/${picture}`;\n\tconst isLoading = size[0] === 1;\n\n\tconst onLoadedImage = (e: SyntheticEvent<HTMLImageElement,Event>) => {\n\t\tconst image = (e.target as unknown) as HTMLImageElement;\n\t\tconst { width,height } = image;\n\t\tif(width === size[0] && width === size[1]) {\n\t\t\t// image dimensions haven't changes\n\t\t\t// no need to perform the update\n\t\t\treturn;\n\t\t}\n\t\tsetSize([width,height]);\n\t};\n\n\tReact.useEffect(() => {\n\t\t// we will allow hovering animations when Image has finished loading\n\t\t// and we know its dimensions, this is done to avoid flickering while resizing\n\t\tif(!allowAnimations && !allowAnimations) {\n\t\t\tsetTimeout(() => setAllowAnimations(true),500);\n\t\t}\n\t},[isLoading]);\n\n\tconst cardClassNames = classnames(\"card \",className,{\n\t\thover: isMouseOver,\n\t\tloading: isLoading,\n\t\t'interact': allowAnimations\n\t});\n\n\treturn (\n\t\t<article\n\t\t\tclassName={cardClassNames}\n\t\t\tonMouseEnter={() => setMouseOver(true)}\n\t\t\tonMouseLeave={() => setMouseOver(false)}\n\t\t>\n\t\t\t<div className=\"head\">\n\t\t\t\t<div className=\"avatar\">{title[0]}</div>\n\t\t\t\t<div className=\"title\">{title}</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"picture\">\n\t\t\t\t<img\n\t\t\t\t\tstyle={{ transform: `scale(${imageScale})` }}\n\t\t\t\t\tsrc={imageUrl}\n\t\t\t\t\talt={altText}\n\t\t\t\t\tonLoad={onLoadedImage}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div className=\"body\">{props.body}</div>\n\t\t</article>\n\t);\n};\n\nexport default styled(Card)`\n\tposition: relative;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbox-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n\tbackground: white;\n\tborder-radius: 4px;\n\n\t.avatar {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\n\t\twidth: 40px;\n\t\theight: 40px;\n\t\toverflow: hidden;\n\t\tposition: relative;\n\t\tfont-size: 1.25rem;\n\t\tflex-shrink: 0;\n\t\tfont-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n\t\tline-height: 1;\n\t\tuser-select: none;\n\t\tborder-radius: 50%;\n\t\tmargin-right: 13px;\n\t\tbackground: coral;\n\t\tcolor: white;\n\t}\n\n\t.head {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tpadding: 16px;\n\t}\n\n\t.body {\n\t\tfont-size: 0.875rem;\n\t\tfont-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n\t\tfont-weight: 400;\n\t\tline-height: 1.43;\n\t\tletter-spacing: 0.01071em;\n\t\tcolor: rgba(0, 0, 0, 0.54);\n\t\tpadding: 16px;\n\t}\n\n\t.picture {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t\tpadding-top: 80%;\n\t\tcursor: pointer;\n\t}\n\n\timg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\ttransform-origin: top center;\n\t\ttransition: opacity 0.5s ease-in;\n\t}\n\n\t&.interact img{\n\t\t \n\t\t\ttransition: all 0.5s ease-out;\n\t\t\n\t}\n\n\t&.loading img,\n\t&.loading .body {\n\t\topacity: 0;\n\t}\n`;\n"]},"metadata":{},"sourceType":"module"}