{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport nodeFetch from 'node-fetch';\nvar isServer = false;\nvar GQ_ENDPOINT = isServer ? \"http://localhost:\".concat(8081, \"/graphql\") : '/graphql';\nexport default (function _callee(request) {\n  var fetcher, promise, result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fetcher = isServer ? nodeFetch : fetch;\n          promise = fetcher(GQ_ENDPOINT, {\n            method: 'POST',\n            body: request,\n            headers: {\n              \"Content-Type\": \"application/graphql\"\n            }\n          });\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(promise.then(function (e) {\n            return e.json();\n          }));\n\n        case 4:\n          result = _context.sent;\n\n          if (!(!result || result.errors)) {\n            _context.next = 8;\n            break;\n          }\n\n          console.log('Error while fetching GQ', {\n            result: result\n          });\n          return _context.abrupt(\"return\", {});\n\n        case 8:\n          return _context.abrupt(\"return\", result.data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/app/client/api/gq.ts"],"names":["nodeFetch","isServer","GQ_ENDPOINT","request","fetcher","fetch","promise","method","body","headers","then","e","json","result","errors","console","log","data"],"mappings":";AAAA,OAAOA,SAAP,MAAwC,YAAxC;AAEA,IAAMC,QAAQ,QAAd;AACA,IAAMC,WAAW,GAAGD,QAAQ,8BAAuB,IAAvB,gBAAwC,UAApE;AAOA,gBAAe,iBAAUE,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAERC,UAAAA,OAFQ,GAEGH,QAAQ,GAAGD,SAAH,GAAeK,KAF1B;AAIRC,UAAAA,OAJQ,GAIEF,OAAO,CAACF,WAAD,EAAa;AAEnCK,YAAAA,MAAM,EAAE,MAF2B;AAGnCC,YAAAA,IAAI,EAAEL,OAH6B;AAInCM,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB;AAJ0B,WAAb,CAJT;AAAA;AAAA,2CAYOH,OAAO,CAACI,IAAR,CAAa,UAACC,CAAD,EAAa;AAC9C,mBAAOA,CAAC,CAACC,IAAF,EAAP;AACA,WAFoB,CAZP;;AAAA;AAYRC,UAAAA,MAZQ;;AAAA,gBAiBX,CAACA,MAAD,IAAWA,MAAM,CAACC,MAjBP;AAAA;AAAA;AAAA;;AAmBbC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAsC;AAAEH,YAAAA,MAAM,EAANA;AAAF,WAAtC;AAnBa,2CAqBN,EArBM;;AAAA;AAAA,2CAwBPA,MAAM,CAACI,IAxBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import nodeFetch,{ Response,Body } from 'node-fetch';\n\nconst isServer = typeof window === 'undefined';\nconst GQ_ENDPOINT = isServer ? `http://localhost:${8081}/graphql` : '/graphql';\n\ninterface GQResponse {\n\terrors: Array<object> | undefined;\n\tdata: object;\n}\n\nexport default async <T>(request: string) => {\n\n\tconst fetcher = (isServer ? nodeFetch : fetch);\n\n\tconst promise = fetcher(GQ_ENDPOINT,{\n\n\t\tmethod: 'POST',\n\t\tbody: request,\n\t\theaders: { \"Content-Type\": \"application/graphql\" }\n\n\t}) as unknown as Promise<Body>;\n\n\tconst result = await promise.then((e: Body) => {\n\t\treturn e.json() as Promise<Object>;\n\t}) as GQResponse;\n\n\n\tif(!result || result.errors) {\n\n\t\tconsole.log('Error while fetching GQ',{ result });\n\n\t\treturn {};\n\t}\n\n\treturn result.data;\n};"]},"metadata":{},"sourceType":"module"}