{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport nodeFetch from 'node-fetch';\nvar isServer = false;\nvar GQ_ENDPOINT = isServer ? \"http://localhost:\".concat(8081, \"/graphql\") : '/graphql';\nexport default (function _callee(request) {\n  var fetcher, promise, result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fetcher = isServer ? nodeFetch : fetch;\n          promise = fetcher(GQ_ENDPOINT, {\n            method: 'POST',\n            body: request,\n            headers: {\n              \"Content-Type\": \"application/graphql\"\n            }\n          });\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(promise.then(function (e) {\n            return e.json();\n          }));\n\n        case 4:\n          result = _context.sent;\n\n          if (!(!result || result.errors)) {\n            _context.next = 8;\n            break;\n          }\n\n          console.log('Error while fetching GQ', {\n            result: result\n          });\n          return _context.abrupt(\"return\", {});\n\n        case 8:\n          return _context.abrupt(\"return\", result.data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});","map":null,"metadata":{},"sourceType":"module"}