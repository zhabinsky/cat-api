{"ast":null,"code":"import nodeFetch from 'node-fetch';\nconst isServer = true;\nconst GRAPH_QL_ENPOINT = isServer ? `http://localhost:${8081}/graphql` : '/graphql';\nexport default (async request => {\n  const fetcher = isServer ? nodeFetch : fetch;\n  const promise = fetcher(GRAPH_QL_ENPOINT, {\n    method: 'POST',\n    body: request,\n    headers: {\n      'Content-Type': 'application/graphql'\n    }\n  });\n  const result = await promise.then(e => {\n    return e.json();\n  });\n\n  if (!result || result.errors) {\n    console.log('Error while fetching GQ', {\n      result\n    });\n    return {};\n  }\n\n  return result.data;\n});","map":{"version":3,"sources":["/Users/vladislavzhabinsky/coding/job-applications/telia/src/app/client/api/gq.ts"],"names":["nodeFetch","isServer","GRAPH_QL_ENPOINT","request","fetcher","fetch","promise","method","body","headers","result","then","e","json","errors","console","log","data"],"mappings":"AAAA,OAAOA,SAAP,MAAwC,YAAxC;AAEA,MAAMC,QAAQ,OAAd;AAEA,MAAMC,gBAAgB,GAAGD,QAAQ,GAAI,oBAAmB,IAAK,UAA5B,GAAwC,UAAzE;AAOA,gBAAe,MAAUE,OAAV,IAA8B;AAC5C,QAAMC,OAAO,GAAGH,QAAQ,GAAGD,SAAH,GAAeK,KAAvC;AAEA,QAAMC,OAAO,GAAIF,OAAO,CAACF,gBAAD,EAAmB;AAC1CK,IAAAA,MAAM,EAAE,MADkC;AAE1CC,IAAAA,IAAI,EAAEL,OAFoC;AAG1CM,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAHiC,GAAnB,CAAxB;AAMA,QAAMC,MAAM,GAAI,MAAMJ,OAAO,CAACK,IAAR,CAAcC,CAAD,IAAa;AAC/C,WAAOA,CAAC,CAACC,IAAF,EAAP;AACA,GAFqB,CAAtB;;AAIA,MAAI,CAACH,MAAD,IAAWA,MAAM,CAACI,MAAtB,EAA8B;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC;AAACN,MAAAA;AAAD,KAAvC;AAEA,WAAO,EAAP;AACA;;AAED,SAAOA,MAAM,CAACO,IAAd;AACA,CApBD","sourcesContent":["import nodeFetch, {Response, Body} from 'node-fetch'\n\nconst isServer = typeof window === 'undefined'\n\nconst GRAPH_QL_ENPOINT = isServer ? `http://localhost:${8081}/graphql` : '/graphql'\n\ninterface GQResponse {\n\terrors: Array<object> | undefined\n\tdata: object\n}\n\nexport default async <T>(request: string) => {\n\tconst fetcher = isServer ? nodeFetch : fetch\n\n\tconst promise = (fetcher(GRAPH_QL_ENPOINT, {\n\t\tmethod: 'POST',\n\t\tbody: request,\n\t\theaders: {'Content-Type': 'application/graphql'}\n\t}) as unknown) as Promise<Body>\n\n\tconst result = (await promise.then((e: Body) => {\n\t\treturn e.json() as Promise<Object>\n\t})) as GQResponse\n\n\tif (!result || result.errors) {\n\t\tconsole.log('Error while fetching GQ', {result})\n\n\t\treturn {}\n\t}\n\n\treturn result.data\n}\n"]},"metadata":{},"sourceType":"module"}